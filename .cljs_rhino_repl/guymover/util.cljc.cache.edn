;; Analyzed by ClojureScript 1.7.58
{:use-macros nil, :excludes #{}, :name guymover.util, :imports nil, :requires {gstring goog.string, goog.string goog.string, goog.string.format goog.string.format}, :uses nil, :defs {stringf {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 6, :column 7, :end-line 6, :end-column 14, :arglists (quote ([fmt & rest])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt rest)], :arglists ([fmt & rest]), :arglists-meta (nil)}}, :name guymover.util/stringf, :variadic true, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt rest)], :arglists ([fmt & rest]), :arglists-meta (nil)}, :method-params [(fmt rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & rest])}, clr-hex {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([[r g b]])), :doc "Converts rgb colors to hex."}, :name guymover.util/clr-hex, :variadic false, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 14, :method-params ([p__35242]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[r g b]])), :doc "Converts rgb colors to hex."}, clr-dist2 {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([clr1 clr2]))}, :name guymover.util/clr-dist2, :variadic false, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 16, :method-params ([clr1 clr2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([clr1 clr2]))}, new-uuid {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 31, :column 7, :end-line 31, :end-column 15, :arglists (quote ([])), :doc "Generate a random UUID in clojure or clojurescript."}, :name guymover.util/new-uuid, :variadic false, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Generate a random UUID in clojure or clojurescript."}, clr-dist {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([clr1 clr2]))}, :name guymover.util/clr-dist, :variadic false, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 15, :method-params ([clr1 clr2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([clr1 clr2]))}, clr-gen {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 43, :column 7, :end-line 43, :end-column 14, :arglists (quote ([color-set & {:keys [retries threshold], :or {retries 10, threshold 5}}])), :doc "Given a set of existing colors,\nattempt to generate a random color\nthat is at least a distance of threshold\nfrom all existing colors.\n\nIf this cant't be done in the specified\nnumber of retries, the furthest color from\nall existing colors is picked.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color-set {:keys [retries threshold], :or {retries 10, threshold 5}})], :arglists ([color-set & {:keys [retries threshold], :or {retries 10, threshold 5}}]), :arglists-meta (nil)}}, :name guymover.util/clr-gen, :variadic true, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color-set {:keys [retries threshold], :or {retries 10, threshold 5}})], :arglists ([color-set & {:keys [retries threshold], :or {retries 10, threshold 5}}]), :arglists-meta (nil)}, :method-params [(color-set {:keys [retries threshold], :or {retries 10, threshold 5}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists ([color-set & {:keys [retries threshold], :or {retries 10, threshold 5}}]), :doc "Given a set of existing colors,\nattempt to generate a random color\nthat is at least a distance of threshold\nfrom all existing colors.\n\nIf this cant't be done in the specified\nnumber of retries, the furthest color from\nall existing colors is picked."}, add-color {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :line 71, :column 7, :end-line 71, :end-column 16, :arglists (quote ([colors & {:keys [retries threshold], :or {retries 10, threshold 5}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(colors {:keys [retries threshold], :or {retries 10, threshold 5}})], :arglists ([colors & {:keys [retries threshold], :or {retries 10, threshold 5}}]), :arglists-meta (nil)}}, :name guymover.util/add-color, :variadic true, :file "C:\\Users\\Kaylen\\git\\guymover\\src\\guymover\\util.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(colors {:keys [retries threshold], :or {retries 10, threshold 5}})], :arglists ([colors & {:keys [retries threshold], :or {retries 10, threshold 5}}]), :arglists-meta (nil)}, :method-params [(colors {:keys [retries threshold], :or {retries 10, threshold 5}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists ([colors & {:keys [retries threshold], :or {retries 10, threshold 5}}])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:dist :retries set? :clr :threshold color-set}, :order [:retries :threshold set? color-set :clr :dist]}, :doc nil}